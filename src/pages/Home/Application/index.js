import classNames from "classnames/bind"
import { useContext, useRef, useState } from "react"

import styles from './Application.module.css'
import { DarkModeContext } from '../../../common/DarkModeContext'
import Button from "../../../components/Button"
import Messages from '../../../components/Messages'
import { shortenUrl } from '../../../service/shortenService'
import Loader from '../../../components/Loader'

const cx = classNames.bind(styles)

export default function Application() {
    const inputRef = useRef()
    const { isDarkMode } = useContext(DarkModeContext)
    const [longLink, setLongLink] = useState('')
    const [isShowCopy, setIsShowCopy] = useState(false)
    const [isShowMessage, setIsShowMessage] = useState(false)
    const [contentMessage, setContentMessage] = useState({})
    const [isLoading, setIsLoading] = useState(false)

    const handleSetLongLink = (e) => {
        setLongLink(e.target.value)
    }
    const handleShortenLink = async (e) => {
        e.preventDefault()
        if (!isShowCopy) {
            const URL_REGEXP = new RegExp("^(http|https|ftp)://", "i")
            let isProtocolOk = URL_REGEXP.test(longLink);
            if (isProtocolOk) {
                try {
                    setIsLoading(true)
                    const shortUrl = await shortenUrl(longLink)
                    setLongLink(shortUrl)
                    setIsShowCopy(val => !val)
                    setContentMessage({
                        type: 'success',
                        message: 'R√∫t g·ªçn link th√†nh c√¥ng!!!'
                    })
                    setIsShowMessage(true)
                    setIsLoading(false)
                } catch (error) {
                    setContentMessage({
                        type: 'error',
                        message: 'Kh√¥ng th·ªÉ r√∫t g·ªçn!!!'
                    })
                    setIsShowMessage(true)
                    console.error('Error:', error);
                }
            } else {
                setContentMessage({
                    type: 'warning',
                    message: 'Vui l√≤ng nh·∫≠p ƒë√∫ng link!!!'
                })
                setIsShowMessage(true)
            }
        } else {
            inputRef.current.select()
            document.execCommand('copy')
            setContentMessage({
                type: 'success',
                message: 'Copy th√†nh c√¥ng!!!'
            })
            setIsShowMessage(true)
            setLongLink('')
            setIsShowCopy(val => !val)
        }
    }
    const handleHiddenMessage = () => {
        setIsShowMessage(false)
    }

    return (
        <div className={cx('wrapper')}>
            <div className={cx('py-6')}>
                <h1
                    className={cx('text-4xl font-bold mb-4', isDarkMode ? 'text-colorLight' : 'text-colorDark')}
                >
                    R√∫t g·ªçn li√™n k·∫øt
                </h1>
                <p
                    className={cx('text-md font-normal w-3/4', isDarkMode ? 'text-colorLight' : 'text-colorDark')}
                >
                    C√¥ng c·ª• h·ªó tr·ª£ r√∫t g·ªçn link, thu g·ªçn link, l√†m ng·∫Øn link, th·ªëng k√™ l∆∞·ª£t truy c·∫≠p, short link, ho√†n to√†n mi·ªÖn ph√≠, b·∫°n c√≥ th·ªÉ chia s·∫ª link tr√™n m·∫°ng x√£ h·ªôi ng·∫Øn g·ªçn nh·∫•tüçÄ.
                </p>
                <div className="mt-4">
                    <form className={cx('form-shorten')}>
                        <div className="relative w-4/5">
                            <input
                                ref={inputRef}
                                className={cx('input-shorten', 'w-100 pl-4 pr-8 py-2 rounded-full border focus:border-primary focus:outline-none', isDarkMode ? 'border-colorLight bg-colorDark text-colorLight' : 'border-colorDark bg-colorLight text-colorDark')}
                                type="text" placeholder="D√°n li√™n k·∫øt c·∫ßn r√∫t g·ªçn"
                                onChange={e => handleSetLongLink(e)} value={longLink}
                            />
                            {/* top-100 right-0 translate-y-[-2/4] */}
                            <Button
                                className={cx('absolute top-1/2 right-0 translate-y-[-50%] mr-4', isDarkMode ? 'text-colorLight' : 'text-ccc')}
                                onClick={e => handleShortenLink(e)}
                            >
                                {isShowCopy ?
                                    <i className="far fa-copy"></i> :
                                    <i className="fa-solid fa-arrow-right-long"></i>
                                }
                            </Button>
                        </div>
                    </form>
                </div>
            </div>
            {isLoading && <Loader />}
            {isShowMessage && <Messages
                type={contentMessage.type}
                message={contentMessage.message}
                onClick={handleHiddenMessage}
            />}
        </div >
    )
}